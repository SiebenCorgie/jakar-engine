#version 450



layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

//Represents a single cluster
struct Cluster{
  uint point_count;
  uint spot_count;
  uint point_indice[512];
  uint spot_indice[512];
};

const uvec3 cluster_size = uvec3(32,16,32);
//Represents all clusters in the 3d grid
layout(set = 0, binding = 0) writeonly buffer ClusterBuffer {
  vec3 min_extend;
  vec3 max_extend;
  Cluster data[cluster_size.x][cluster_size.y][cluster_size.z];
} indice_buffer;

//==============================================================================
struct PointLight
{
  vec3 color;
  vec3 location;
  float intensity;
  float radius;
};

layout(set = 0, binding = 1) readonly buffer point_lights{
  PointLight p_light[];
}u_point_light;
//==============================================================================
struct DirectionalLight
{
  vec3 color;
  vec3 direction;
  float intensity;
};

layout(set = 0, binding = 2) readonly buffer directional_lights{
  DirectionalLight d_light[];
}u_dir_light;
//==============================================================================
struct SpotLight
{
  vec3 color;
  vec3 direction;
  vec3 location;

  float intensity;
  float radius;
  float outer_radius;
  float inner_radius;

};

layout(set = 0, binding = 3) readonly buffer spot_lights{
  SpotLight s_light[];
}u_spot_light;
//==============================================================================

//descibes the count of lights used
layout(set = 0, binding = 4) uniform LightCount{
  uint points;
  uint directionals;
  uint spots;
}u_light_count;

struct AABB
{
  vec3 mins;
  vec3 maxs;
};

struct Sphere
{
  vec3 position;
  float radius;
};

bool cluster_vs_sphere(AABB box, Sphere sphere ){

  // get box closest point to sphere center by clamping
  float x = max(box.mins.x, min(sphere.position.x, box.maxs.x));
  float y = max(box.mins.y, min(sphere.position.y, box.maxs.y));
  float z = max(box.mins.z, min(sphere.position.z, box.maxs.z));

  // this is the same as isPointInsideSphere
  float sqr_distance = ((x - sphere.position.x) * (x - sphere.position.x)) +
                           ((y - sphere.position.y) * (y - sphere.position.y)) +
                           ((z - sphere.position.z) * (z - sphere.position.z));

  return sqr_distance < (sphere.radius * sphere.radius);
}



bool cluster_vs_aabb(AABB cluster, AABB aabb){
  return (cluster.mins.x <= aabb.maxs.x && cluster.maxs.x >= aabb.mins.x) &&
         (cluster.mins.y <= aabb.maxs.y && cluster.maxs.y >= aabb.mins.y) &&
         (cluster.mins.z <= aabb.maxs.z && cluster.maxs.z >= aabb.mins.z);
}


shared AABB cluster_aabb;
//keeps track of the next point light indice from the point light buffer which should be processed
shared uint next_point_index;
//keeps track of the next indice used in the clusters index buffer
shared uint next_p_cluster_index;



//Same for the spot lights
shared uint next_spot_index;
shared uint next_s_cluster_index;
//shared uint cluster_s_count;

void main() {


  uvec3 id = gl_WorkGroupID;

  //Get the max and min extend of all the cluster, then find the aabb of our
  // cluster and use them together with the other cores to set the indice list
  if (gl_LocalInvocationIndex == 0){

    vec3 tmp_min;
    vec3 tmp_max;

    if (u_light_count.points >= 1){
      tmp_min = u_point_light.p_light[0].location - u_point_light.p_light[0].radius;
      tmp_max = u_point_light.p_light[0].location + u_point_light.p_light[0].radius;
    }

    //Check all the mins and max for all the ligths
    for (uint i = 1; i<u_light_count.points; i++){
      PointLight light = u_point_light.p_light[i];
      tmp_min = min(tmp_min, light.location - light.radius);
      tmp_max = max(tmp_max, light.location + light.radius);
    }

    //Now set them for all
    indice_buffer.max_extend = tmp_max;
    indice_buffer.min_extend = tmp_min;

    //Now construct the cluster for this workgroup based on the current ID

    //The length in each direction from min to max
    vec3 all_length = tmp_max - tmp_min;
    vec3 one_cluster_length = all_length;
    one_cluster_length.x = one_cluster_length.x / float(cluster_size.x);
    one_cluster_length.y = one_cluster_length.y / float(cluster_size.y);
    one_cluster_length.z = one_cluster_length.z / float(cluster_size.z);



    AABB tmp_cluster;
    tmp_cluster.mins.x = tmp_min.x + (one_cluster_length.x * float(id.x));
    tmp_cluster.mins.y = tmp_min.y + (one_cluster_length.y * float(id.y));
    tmp_cluster.mins.z = tmp_min.z + (one_cluster_length.z * float(id.z));

    tmp_cluster.maxs.x = tmp_min.x + (one_cluster_length.x * float(id.x + 1));
    tmp_cluster.maxs.y = tmp_min.y + (one_cluster_length.y * float(id.y + 1));
    tmp_cluster.maxs.z = tmp_min.z + (one_cluster_length.z * float(id.z + 1));


    cluster_aabb = tmp_cluster;

    //Finally reset the cluster counter
    indice_buffer.data[id.x][id.y][id.z].point_count = 0;
    indice_buffer.data[id.x][id.y][id.z].spot_count = 0;

    next_point_index = 0;
    next_spot_index = 0;

    next_p_cluster_index = 0;
    next_s_cluster_index = 0;
  }

  //Sync
  barrier();

  uint next_index = atomicAdd(next_point_index, 1);

  //Now cycle through all the (point) lights and assign them to this cluster
  while (next_index < u_light_count.points){
    //Get the light at this index
    PointLight light = u_point_light.p_light[next_index];

    Sphere light_sphere;
    light_sphere.radius = light.radius;
    light_sphere.position = light.location;

    //Test for intersection
    if (cluster_vs_sphere(cluster_aabb, light_sphere)){
      //intersercts, get a new cluster indice assign and add one to the count
      uint cluster_indice = atomicAdd(next_p_cluster_index, 1);
      //early return if we are outside of the cluster index buffer
      if (cluster_indice >= 512){
        break;
      }
      indice_buffer.data[id.x][id.y][id.z].point_indice[cluster_indice] = next_index;
      uint old_count = atomicAdd(indice_buffer.data[id.x][id.y][id.z].point_count, 1);
    }

    //Get a new light index
    next_index = atomicAdd(next_point_index, 1);
  }

  //Final sync
  barrier();
}
